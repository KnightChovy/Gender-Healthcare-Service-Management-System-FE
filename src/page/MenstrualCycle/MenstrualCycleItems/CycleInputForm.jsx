import React from "react";
import { useState, useEffect } from "react";
import classNames from "classnames/bind";
import styles from "../MenstrualCycle.module.scss";
import menstrualService from "../../../services/menstrual.service";
import * as Yup from "yup";

const cx = classNames.bind(styles);

function CycleInputForm({ cycleData, onDataChange, onSaveSuccess }) {
  const [isSaving, setIsSaving] = useState(false);
  const [validationErrors, setValidationErrors] = useState({});

  // Yup validation schema
  const validationSchema = Yup.object().shape({
    lastPeriodDate: Yup.date()
      .required("Ng√†y ƒë·∫ßu k√¨ kinh nguy·ªát l√† b·∫Øt bu·ªôc")
      .max(new Date(), "Kh√¥ng th·ªÉ ch·ªçn ng√†y trong t∆∞∆°ng lai")
      .min(
        new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000),
        "Ng√†y kh√¥ng ƒë∆∞·ª£c qu√° 6 th√°ng tr∆∞·ªõc"
      ),
    cycleLength: Yup.number()
      .required("ƒê·ªô d√†i chu k√¨ l√† b·∫Øt bu·ªôc")
      .integer("ƒê·ªô d√†i chu k√¨ ph·∫£i l√† s·ªë nguy√™n")
      .min(21, "ƒê·ªô d√†i chu k√¨ ph·∫£i t·ª´ 21 ng√†y")
      .max(35, "ƒê·ªô d√†i chu k√¨ kh√¥ng ƒë∆∞·ª£c qu√° 35 ng√†y")
      .typeError("ƒê·ªô d√†i chu k√¨ ph·∫£i l√† s·ªë"),
    periodLength: Yup.number()
      .required("S·ªë ng√†y kinh nguy·ªát l√† b·∫Øt bu·ªôc")
      .integer("S·ªë ng√†y kinh nguy·ªát ph·∫£i l√† s·ªë nguy√™n")
      .min(3, "S·ªë ng√†y kinh nguy·ªát ph·∫£i t·ª´ 3 ng√†y")
      .max(8, "S·ªë ng√†y kinh nguy·ªát kh√¥ng ƒë∆∞·ª£c qu√° 8 ng√†y")
      .typeError("S·ªë ng√†y kinh nguy·ªát ph·∫£i l√† s·ªë"),
    birthControlTime: Yup.string()
      .matches(
        /^([01]?[0-9]|2[0-3]):[0-5][0-9]$/,
        "Th·ªùi gian ph·∫£i c√≥ ƒë·ªãnh d·∫°ng HH:MM"
      )
      .nullable(),
  });

  // Validate single field
  const validateField = async (fieldName, value) => {
    try {
      await Yup.reach(validationSchema, fieldName).validate(value);
      setValidationErrors((prev) => ({
        ...prev,
        [fieldName]: null,
      }));
      return true;
    } catch (error) {
      setValidationErrors((prev) => ({
        ...prev,
        [fieldName]: error.message,
      }));
      return false;
    }
  };

  const handleInputChange = async (e) => {
    const { name, value } = e.target;
    console.log(`Input changed: ${name} = ${value}`); // Debug log

    let processedValue = value;

    // Only allow numeric input for cycleLength and periodLength
    if ((name === "cycleLength" || name === "periodLength") && value) {
      // Remove any non-digit characters
      processedValue = value.replace(/[^0-9]/g, "");

      // Update the input field to show only numeric value
      if (processedValue !== value) {
        e.target.value = processedValue;
      }
    }

    // Update the parent state
    onDataChange({ [name]: processedValue });

    // Validate the field
    await validateField(name, processedValue);
  };

  const setQuickTime = (time) => {
    onDataChange({ birthControlTime: time });
  };

  const getCurrentTime = () => {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, "0");
    const minutes = String(now.getMinutes()).padStart(2, "0");
    return `${hours}:${minutes}`;
  };

  const sendAllEmail = async () => {
    try {
      const result = await menstrualService.sendAllEmail();
      console.log("Email sent successfully:", result);
    } catch (error) {
      console.error("Error sending email reminders:", error);
    }
  };

  const handleConfirmSave = async () => {
    if (isSaving) return; // Prevent double submission

    setIsSaving(true);
    console.log("=== STARTING SAVE PROCESS ===");
    console.log("Current cycleData:", cycleData);

    try {
      // Check authentication first
      const accessToken = localStorage.getItem("accessToken");
      console.log("Access token exists:", !!accessToken);
      if (!accessToken) {
        alert("‚ùå B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u d·ªØ li·ªáu!");
        setIsSaving(false);
        return;
      }

      // Validate all data using Yup schema
      try {
        await validationSchema.validate(cycleData, { abortEarly: false });
        // Clear all validation errors if validation passes
        setValidationErrors({});
      } catch (validationError) {
        console.log("Validation errors:", validationError.errors);

        // Set validation errors for display
        const errors = {};
        if (validationError.inner) {
          validationError.inner.forEach((error) => {
            errors[error.path] = error.message;
          });
        }
        setValidationErrors(errors);

        // Show first error to user
        alert(`‚ö†Ô∏è D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá:\n${validationError.errors[0]}`);
        setIsSaving(false);
        return;
      }

      // Convert to numbers for additional checks
      const cycleLength = parseInt(cycleData.cycleLength);
      const periodLength = parseInt(cycleData.periodLength);

      // Validate ng√†y kh√¥ng ƒë∆∞·ª£c qu√° xa trong qu√° kh·ª© (warning only)
      const selectedDate = new Date(cycleData.lastPeriodDate);
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

      if (selectedDate < sixMonthsAgo) {
        const confirmOldDate = window.confirm(
          "‚ö†Ô∏è Ng√†y b·∫°n ch·ªçn ƒë√£ l√¢u h∆°n 6 th√°ng.\nD·ªØ li·ªáu d·ª± ƒëo√°n c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c.\n\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?"
        );
        if (!confirmOldDate) {
          setIsSaving(false);
          return;
        }
      }

      // Format l·∫°i vƒÉn b·∫£n x√°c nh·∫≠n
      const confirmText = [
        "üí° X√ÅC NH·∫¨N L∆ØU CHU K·ª≤ üí°",
        "",
        `üìÖ Ng√†y b·∫Øt ƒë·∫ßu: ${new Date(
          cycleData.lastPeriodDate
        ).toLocaleDateString("vi-VN")}`,
        `üîÑ Chu k·ª≥ d√†i: ${cycleLength} ng√†y`,
        `üìä S·ªë ng√†y h√†nh kinh: ${periodLength} ng√†y`,
        "",
        "‚úÖ B·∫°n c√≥ mu·ªën l∆∞u th√¥ng tin n√†y kh√¥ng?",
      ].join("\n");

      const confirmSave = window.confirm(confirmText);
      if (!confirmSave) {
        setIsSaving(false); // Reset saving state
        return;
      }

      // G·ªçi API ƒë·ªÉ l∆∞u d·ªØ li·ªáu
      const saveData = {
        lastPeriodDate: cycleData.lastPeriodDate,
        cycleLength: cycleLength,
        periodLength: periodLength,
        pillTime: cycleData.birthControlTime || "", // Changed from birthControlTime to pillTime
      };

      // Validate data format before sending
      if (
        !saveData.lastPeriodDate ||
        !saveData.cycleLength ||
        !saveData.periodLength
      ) {
        throw new Error("Missing required fields in saveData");
      }

      const result = await menstrualService.updateCycleData(saveData);

      // Simplified success handling
      alert("‚úÖ ƒê√£ l∆∞u th√¥ng tin chu k·ª≥ th√†nh c√¥ng!");

      // Call the refresh callback if provided
      if (onSaveSuccess) {
        onSaveSuccess();
      }
    } catch (error) {
      console.error("Error saving cycle data:", error);

      // Detailed error logging
      if (error.response) {
        // Handle specific error codes
        switch (error.response.status) {
          case 401:
            alert("‚ùå Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
            break;
          case 400: {
            const errorMsg =
              error.response.data?.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
            alert(`‚ùå L·ªói d·ªØ li·ªáu: ${errorMsg}`);
            break;
          }
          case 403:
            alert("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y!");
            break;
          case 500:
            alert("‚ùå L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau!");
            break;
          default:
            alert(
              `‚ùå L·ªói t·ª´ server (${error.response.status}): ${
                error.response.data?.message || "Kh√¥ng x√°c ƒë·ªãnh"
              }`
            );
        }
      } else if (error.request) {
        console.error("No response received:", error.request);
        alert(
          "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!"
        );
      } else {
        console.error("Error:", error.message);
        alert(`‚ùå C√≥ l·ªói x·∫£y ra: ${error.message}`);
      }
    } finally {
      setIsSaving(false);
    }
  };

  // Th√™m helper function ƒë·ªÉ l·∫•y ng√†y h√¥m nay theo format YYYY-MM-DD
  const getTodayString = () => {
    const today = new Date();
    return today.toISOString().split("T")[0];
  };

  return (
    <div className={cx("input-section", "col-span-1")}>
      <h2>Th√¥ng tin chu k√¨</h2>

      <div className={cx("form-group")} style={{ display: "block" }}>
        <span>Ng√†y ƒë·∫ßu k√¨ kinh nguy·ªát g·∫ßn nh·∫•t:</span>
        <input
          type="date"
          name="lastPeriodDate"
          value={cycleData?.lastPeriodDate || ""}
          onChange={handleInputChange}
          max={getTodayString()}
          style={{
            width: "100%",
            borderColor: validationErrors.lastPeriodDate
              ? "#ff4444"
              : undefined,
          }}
        />
        {validationErrors.lastPeriodDate && (
          <div
            style={{
              color: "#ff4444",
              fontSize: "0.8rem",
              marginTop: "4px",
              display: "block",
            }}
          >
            {validationErrors.lastPeriodDate}
          </div>
        )}
        <small
          style={{
            color: "#666",
            fontSize: "0.8rem",
            marginTop: "4px",
            display: "block",
          }}
        >
          * Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu chu k·ª≥ kinh nguy·ªát g·∫ßn nh·∫•t
        </small>
      </div>

      <div className={cx("form-group")} style={{ display: "block" }}>
        <span>ƒê·ªô d√†i chu k√¨ (ng√†y):</span>
        <input
          type="number"
          name="cycleLength"
          value={cycleData?.cycleLength || ""}
          onChange={handleInputChange}
          min="21"
          max="35"
          style={{
            width: "100%",
            borderColor: validationErrors.cycleLength ? "#ff4444" : undefined,
          }}
          placeholder="Nh·∫≠p s·ªë t·ª´ 21-35"
        />
        {validationErrors.cycleLength && (
          <div
            style={{
              color: "#ff4444",
              fontSize: "0.8rem",
              marginTop: "4px",
              display: "block",
            }}
          >
            {validationErrors.cycleLength}
          </div>
        )}
        <small
          style={{
            color: "#666",
            fontSize: "0.8rem",
            marginTop: "4px",
            display: "block",
          }}
        >
          * Nh·∫≠p ƒë·ªô d√†i chu k·ª≥ kinh nguy·ªát (21-35 ng√†y)
        </small>
      </div>

      <div className={cx("form-group")} style={{ display: "block" }}>
        <span>S·ªë ng√†y kinh nguy·ªát:</span>
        <input
          type="number"
          name="periodLength"
          value={cycleData?.periodLength || ""}
          onChange={handleInputChange}
          min="3"
          max="8"
          style={{
            width: "100%",
            borderColor: validationErrors.periodLength ? "#ff4444" : undefined,
          }}
          placeholder="Nh·∫≠p s·ªë t·ª´ 3-8"
        />
        {validationErrors.periodLength && (
          <div
            style={{
              color: "#ff4444",
              fontSize: "0.8rem",
              marginTop: "4px",
              display: "block",
            }}
          >
            {validationErrors.periodLength}
          </div>
        )}
        <small
          style={{
            color: "#666",
            fontSize: "0.8rem",
            marginTop: "4px",
            display: "block",
          }}
        >
          * Nh·∫≠p s·ªë ng√†y h√†nh kinh (3-8 ng√†y)
        </small>
      </div>

      <div className={cx("form-group")}>
        <span>Th·ªùi gian u·ªëng thu·ªëc tr√°nh thai:</span>
        <div className={cx("time-input-container")}>
          <input
            type="time"
            name="birthControlTime"
            value={cycleData?.birthControlTime || ""}
            onChange={handleInputChange}
            min="06:00"
            max="23:00"
            className={cx("time-input")}
            style={{
              borderColor: validationErrors.birthControlTime
                ? "#ff4444"
                : undefined,
            }}
          />
          {validationErrors.birthControlTime && (
            <div
              style={{
                color: "#ff4444",
                fontSize: "0.8rem",
                marginTop: "4px",
                display: "block",
                width: "100%",
              }}
            >
              {validationErrors.birthControlTime}
            </div>
          )}

          <button
            type="button"
            className={cx("current-time-btn")}
            onClick={() => setQuickTime(getCurrentTime())}
            title="ƒê·∫∑t th·ªùi gian hi·ªán t·∫°i"
          >
            üïê B√¢y gi·ªù
          </button>
        </div>

        <div className={cx("quick-time-buttons")}>
          <span className={cx("quick-time-label")}>Th·ªùi gian ph·ªï bi·∫øn:</span>
          <div className={cx("time-buttons-grid")}>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("07:00")}
            >
              7:00 AM
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("08:00")}
            >
              8:00 AM
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("12:00")}
            >
              12:00 CH
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("18:00")}
            >
              6:00 CH
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("20:00")}
            >
              8:00 CH
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("22:00")}
            >
              10:00 CH
            </button>
          </div>
        </div>

        <div className={cx("form-group")}>
          <button
            className={cx("confirm-btn")}
            onClick={() => {
              handleConfirmSave();
              // sendAllEmail();
            }}
            disabled={isSaving}
          >
            {isSaving ? "‚è≥ ƒêang l∆∞u..." : "üíæ X√°c nh·∫≠n l∆∞u v√† nh·∫≠n th√¥ng b√°o"}
          </button>
        </div>

        <small
          style={{
            color: "#7f8c8d",
            fontSize: "0.85rem",
            marginTop: "5px",
            display: "block",
          }}
        >
          Khi b·∫°n l∆∞u th√¥ng tin, h·ªá th·ªëng s·∫Ω g·ª≠i th√¥ng b√°o nh·∫Øc nh·ªü u·ªëng thu·ªëc
          tr√°nh thai qua email cho b·∫°n.
        </small>
      </div>
    </div>
  );
}

export default CycleInputForm;
