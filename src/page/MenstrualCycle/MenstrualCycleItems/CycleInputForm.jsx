import React from "react";
import { useState, useEffect } from "react";
import classNames from "classnames/bind";
import styles from "../MenstrualCycle.module.scss";
import menstrualService from "../../../services/menstrual.service";

const cx = classNames.bind(styles);

function CycleInputForm({ cycleData, onDataChange, onSaveSuccess }) {
  const [timer, setTimer] = useState(null);
  const [isTimerActive, setIsTimerActive] = useState(false);
  const [selectedDays, setSelectedDays] = useState([]);
  const [isSaving, setIsSaving] = useState(false);

  const daysOfWeek = [
    { value: "monday", label: "Th·ª© 2", short: "T2" },
    { value: "tuesday", label: "Th·ª© 3", short: "T3" },
    { value: "wednesday", label: "Th·ª© 4", short: "T4" },
    { value: "thursday", label: "Th·ª© 5", short: "T5" },
    { value: "friday", label: "Th·ª© 6", short: "T6" },
    { value: "saturday", label: "Th·ª© 7", short: "T7" },
    { value: "sunday", label: "Ch·ªß nh·∫≠t", short: "CN" },
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    console.log(`Input changed: ${name} = ${value}`); // Debug log

    // Validate ng√†y ƒë·∫ßu k·ª≥ kinh nguy·ªát
    if (name === "lastPeriodDate") {
      if (value) {
        // Ch·ªâ validate khi c√≥ gi√° tr·ªã
        const selectedDate = new Date(value);
        const today = new Date();
        today.setHours(23, 59, 59, 999); // ƒê·∫∑t v·ªÅ cu·ªëi ng√†y h√¥m nay

        if (selectedDate > today) {
          alert(
            "‚ö†Ô∏è Kh√¥ng th·ªÉ ch·ªçn ng√†y trong t∆∞∆°ng lai!\nVui l√≤ng ch·ªçn ng√†y h√¥m nay ho·∫∑c tr∆∞·ªõc ƒë√≥."
          );
          return; // Kh√¥ng c·∫≠p nh·∫≠t state n·∫øu ng√†y kh√¥ng h·ª£p l·ªá
        }
      }
    }

    // Validate s·ªë v·ªõi gi√° tr·ªã min/max
    if (name === "cycleLength") {
      if (value && (parseInt(value) < 21 || parseInt(value) > 35)) {
        // Cho ph√©p nh·∫≠p nh∆∞ng hi·ªÉn th·ªã c·∫£nh b√°o
        console.warn("Chu k·ª≥ n√™n t·ª´ 21-35 ng√†y");
      }
    }

    if (name === "periodLength") {
      if (value && (parseInt(value) < 3 || parseInt(value) > 8)) {
        // Cho ph√©p nh·∫≠p nh∆∞ng hi·ªÉn th·ªã c·∫£nh b√°o
        console.warn("S·ªë ng√†y kinh nguy·ªát n√™n t·ª´ 3-8 ng√†y");
      }
    }

    onDataChange({ [name]: value });
  };

  const setQuickTime = (time) => {
    onDataChange({ birthControlTime: time });
  };

  const getCurrentTime = () => {
    const now = new Date();
    const hours = String(now.getHours()).padStart(2, "0");
    const minutes = String(now.getMinutes()).padStart(2, "0");
    return `${hours}:${minutes}`;
  };

  const handleDaySelection = (dayValue) => {
    setSelectedDays((prev) => {
      if (prev.includes(dayValue)) {
        return prev.filter((day) => day !== dayValue);
      } else {
        return [...prev, dayValue];
      }
    });
  };

  const selectAllDays = () => {
    const allDays = daysOfWeek.map((day) => day.value);
    setSelectedDays(allDays);
  };

  const clearAllDays = () => {
    setSelectedDays([]);
  };

  const setReminder = () => {
    if (!cycleData?.birthControlTime) {
      alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn th·ªùi gian u·ªëng thu·ªëc tr∆∞·ªõc!");
      return;
    }

    if (selectedDays.length === 0) {
      alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt ng√†y trong tu·∫ßn!");
      return;
    }

    if (isTimerActive) {
      clearTimeout(timer);
      setIsTimerActive(false);
      setTimer(null);
      alert("‚úÖ ƒê√£ h·ªßy t·∫•t c·∫£ h·∫πn gi·ªù!");
      return;
    }

    // Thi·∫øt l·∫≠p nhi·ªÅu h·∫πn gi·ªù cho c√°c ng√†y ƒë√£ ch·ªçn
    setupMultipleReminders();
  };

  const setupMultipleReminders = () => {
    if (!cycleData?.birthControlTime) return;

    const [hours, minutes] = cycleData.birthControlTime.split(":");
    const now = new Date();
    let nextReminderTime = null;

    for (let i = 0; i < 7; i++) {
      const checkDate = new Date(now);
      checkDate.setDate(now.getDate() + i);
      checkDate.setHours(parseInt(hours), parseInt(minutes), 0, 0);

      const dayOfWeek = getDayValue(checkDate.getDay());

      if (selectedDays.includes(dayOfWeek) && checkDate > now) {
        nextReminderTime = checkDate;
        break;
      }
    }

    if (!nextReminderTime) {
      alert("‚ùå Kh√¥ng th·ªÉ t√¨m th·∫•y th·ªùi gian h·∫πn gi·ªù ti·∫øp theo!");
      return;
    }

    const timeUntilReminder = nextReminderTime.getTime() - now.getTime();

    const newTimer = setTimeout(() => {
      const dayName = daysOfWeek.find(
        (day) => day.value === getDayValue(nextReminderTime.getDay())
      )?.label;
      alert(`‚è∞ ƒê·∫øn gi·ªù u·ªëng thu·ªëc tr√°nh thai r·ªìi! (${dayName})`);

      // T·ª± ƒë·ªông ƒë·∫∑t h·∫πn gi·ªù ti·∫øp theo
      setIsTimerActive(false);
      setTimer(null);
      setTimeout(() => setupMultipleReminders(), 1000);
    }, timeUntilReminder);

    setTimer(newTimer);
    setIsTimerActive(true);

    const dayName = daysOfWeek.find(
      (day) => day.value === getDayValue(nextReminderTime.getDay())
    )?.label;
    const timeString = nextReminderTime.toLocaleString("vi-VN");
    const selectedDayNames = selectedDays
      .map((day) => daysOfWeek.find((d) => d.value === day)?.short)
      .join(", ");

    alert(
      `‚úÖ ƒê√£ ƒë·∫∑t h·∫πn gi·ªù!\nüìÖ Ng√†y: ${selectedDayNames}\n‚è∞ H·∫πn gi·ªù ti·∫øp theo: ${dayName}, ${timeString}`
    );
  };

  const getDayValue = (dayIndex) => {
    const dayMap = {
      0: "sunday",
      1: "monday",
      2: "tuesday",
      3: "wednesday",
      4: "thursday",
      5: "friday",
      6: "saturday",
    };
    return dayMap[dayIndex];
  };

  const handleConfirmSave = async () => {
    if (isSaving) return; // Prevent double submission

    setIsSaving(true);
    console.log("=== STARTING SAVE PROCESS ===");
    console.log("Current cycleData:", cycleData);

    try {
      // Check authentication first
      const accessToken = localStorage.getItem("accessToken");
      console.log("Access token exists:", !!accessToken);
      if (!accessToken) {
        alert("‚ùå B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ l∆∞u d·ªØ li·ªáu!");
        setIsSaving(false); // Reset saving state
        return;
      }

      // Ki·ªÉm tra d·ªØ li·ªáu h·ª£p l·ªá
      if (
        !cycleData?.lastPeriodDate ||
        cycleData.lastPeriodDate.trim() === ""
      ) {
        alert("‚ö†Ô∏è Vui l√≤ng ch·ªçn ng√†y ƒë·∫ßu k√¨ kinh nguy·ªát g·∫ßn nh·∫•t!");
        setIsSaving(false); // Reset saving state
        return;
      }

      if (
        !cycleData?.cycleLength ||
        cycleData.cycleLength === "" ||
        isNaN(cycleData.cycleLength)
      ) {
        alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ƒë·ªô d√†i chu k√¨ h·ª£p l·ªá!");
        setIsSaving(false); // Reset saving state
        return;
      }

      if (
        !cycleData?.periodLength ||
        cycleData.periodLength === "" ||
        isNaN(cycleData.periodLength)
      ) {
        alert("‚ö†Ô∏è Vui l√≤ng nh·∫≠p s·ªë ng√†y kinh nguy·ªát h·ª£p l·ªá!");
        setIsSaving(false); // Reset saving state
        return;
      }

      // Convert to numbers
      const cycleLength = parseInt(cycleData.cycleLength);
      const periodLength = parseInt(cycleData.periodLength);

      // Validate ng√†y kh√¥ng ƒë∆∞·ª£c l√† t∆∞∆°ng lai
      const selectedDate = new Date(cycleData.lastPeriodDate);
      const today = new Date();
      today.setHours(23, 59, 59, 999);

      if (isNaN(selectedDate.getTime())) {
        alert("‚ö†Ô∏è Ng√†y ƒë·∫ßu k·ª≥ kinh nguy·ªát kh√¥ng h·ª£p l·ªá!");
        setIsSaving(false); // Reset saving state
        return;
      }

      if (selectedDate > today) {
        alert("‚ö†Ô∏è Ng√†y ƒë·∫ßu k·ª≥ kinh nguy·ªát kh√¥ng th·ªÉ l√† ng√†y trong t∆∞∆°ng lai!");
        setIsSaving(false); // Reset saving state
        return;
      }

      // Validate ng√†y kh√¥ng ƒë∆∞·ª£c qu√° xa trong qu√° kh·ª© (v√≠ d·ª•: kh√¥ng qu√° 6 th√°ng)
      const sixMonthsAgo = new Date();
      sixMonthsAgo.setMonth(sixMonthsAgo.getMonth() - 6);

      if (selectedDate < sixMonthsAgo) {
        const confirmOldDate = window.confirm(
          "‚ö†Ô∏è Ng√†y b·∫°n ch·ªçn ƒë√£ l√¢u h∆°n 6 th√°ng.\nD·ªØ li·ªáu d·ª± ƒëo√°n c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c.\n\nB·∫°n c√≥ mu·ªën ti·∫øp t·ª•c kh√¥ng?"
        );
        if (!confirmOldDate) {
          setIsSaving(false); // Reset saving state
          return;
        }
      }

      if (cycleLength < 21 || cycleLength > 35) {
        alert("‚ö†Ô∏è ƒê·ªô d√†i chu k√¨ ph·∫£i t·ª´ 21‚Äì35 ng√†y!");
        setIsSaving(false); // Reset saving state
        return;
      }

      if (periodLength < 3 || periodLength > 8) {
        alert("‚ö†Ô∏è S·ªë ng√†y kinh nguy·ªát ph·∫£i t·ª´ 3‚Äì8 ng√†y!");
        setIsSaving(false); // Reset saving state
        return;
      }

      // Format l·∫°i vƒÉn b·∫£n x√°c nh·∫≠n
      const confirmText = [
        "üí° X√ÅC NH·∫¨N L∆ØU CHU K·ª≤ üí°",
        "",
        `üìÖ Ng√†y b·∫Øt ƒë·∫ßu: ${new Date(
          cycleData.lastPeriodDate
        ).toLocaleDateString("vi-VN")}`,
        `üîÑ Chu k·ª≥ d√†i: ${cycleLength} ng√†y`,
        `üìä S·ªë ng√†y h√†nh kinh: ${periodLength} ng√†y`,
        "",
        "‚úÖ B·∫°n c√≥ mu·ªën l∆∞u th√¥ng tin n√†y kh√¥ng?",
      ].join("\n");

      const confirmSave = window.confirm(confirmText);
      if (!confirmSave) {
        setIsSaving(false); // Reset saving state
        return;
      }

      // G·ªçi API ƒë·ªÉ l∆∞u d·ªØ li·ªáu
      const saveData = {
        lastPeriodDate: cycleData.lastPeriodDate,
        cycleLength: cycleLength,
        periodLength: periodLength,
        pillTime: cycleData.birthControlTime || "", // Changed from birthControlTime to pillTime
      };

      // Validate data format before sending
      if (
        !saveData.lastPeriodDate ||
        !saveData.cycleLength ||
        !saveData.periodLength
      ) {
        throw new Error("Missing required fields in saveData");
      }

      const result = await menstrualService.updateCycleData(saveData);

      // Simplified success handling
      alert("‚úÖ ƒê√£ l∆∞u th√¥ng tin chu k·ª≥ th√†nh c√¥ng!");

      // Call the refresh callback if provided
      if (onSaveSuccess) {
        onSaveSuccess();
      }
    } catch (error) {
      console.error("Error saving cycle data:", error);

      // Detailed error logging
      if (error.response) {
        // Handle specific error codes
        switch (error.response.status) {
          case 401:
            alert("‚ùå Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
            break;
          case 400:
            const errorMsg =
              error.response.data?.message || "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá";
            alert(`‚ùå L·ªói d·ªØ li·ªáu: ${errorMsg}`);
            break;
          case 403:
            alert("‚ùå B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y!");
            break;
          case 500:
            alert("‚ùå L·ªói server. Vui l√≤ng th·ª≠ l·∫°i sau!");
            break;
          default:
            alert(
              `‚ùå L·ªói t·ª´ server (${error.response.status}): ${
                error.response.data?.message || "Kh√¥ng x√°c ƒë·ªãnh"
              }`
            );
        }
      } else if (error.request) {
        console.error("No response received:", error.request);
        alert(
          "‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!"
        );
      } else {
        console.error("Error:", error.message);
        alert(`‚ùå C√≥ l·ªói x·∫£y ra: ${error.message}`);
      }
    } finally {
      setIsSaving(false);
    }
  };

  // Th√™m helper function ƒë·ªÉ l·∫•y ng√†y h√¥m nay theo format YYYY-MM-DD
  const getTodayString = () => {
    const today = new Date();
    return today.toISOString().split("T")[0];
  };

  // Cleanup timer on unmount
  useEffect(() => {
    return () => {
      if (timer) {
        clearTimeout(timer);
      }
    };
  }, [timer]);

  return (
    <div className={cx("input-section", "col-span-1")}>
      <h2>Th√¥ng tin chu k√¨</h2>

      <div className={cx("form-group")} style={{ display: "block" }}>
        <span>Ng√†y ƒë·∫ßu k√¨ kinh nguy·ªát g·∫ßn nh·∫•t:</span>
        <input
          type="date"
          name="lastPeriodDate"
          value={cycleData?.lastPeriodDate || ""}
          onChange={handleInputChange}
          max={getTodayString()}
          style={{ width: "100%" }}
        />
        <small
          style={{
            color: "#666",
            fontSize: "0.8rem",
            marginTop: "4px",
            display: "block",
          }}
        >
          * Ch·ªçn ng√†y b·∫Øt ƒë·∫ßu chu k·ª≥ kinh nguy·ªát g·∫ßn nh·∫•t
        </small>
      </div>

      <div className={cx("form-group")} style={{ display: "block" }}>
        <span>ƒê·ªô d√†i chu k√¨ (ng√†y):</span>
        <input
          type="number"
          name="cycleLength"
          value={cycleData?.cycleLength || ""}
          onChange={handleInputChange}
          min="21"
          max="35"
          style={{ width: "100%" }}
          placeholder="Nh·∫≠p s·ªë t·ª´ 21-35"
        />
        <small
          style={{
            color: "#666",
            fontSize: "0.8rem",
            marginTop: "4px",
            display: "block",
          }}
        >
          * Nh·∫≠p ƒë·ªô d√†i chu k·ª≥ kinh nguy·ªát (21-35 ng√†y)
        </small>
      </div>

      <div className={cx("form-group")} style={{ display: "block" }}>
        <span>S·ªë ng√†y kinh nguy·ªát:</span>
        <input
          type="number"
          name="periodLength"
          value={cycleData?.periodLength || ""}
          onChange={handleInputChange}
          min="3"
          max="8"
          style={{ width: "100%" }}
          placeholder="Nh·∫≠p s·ªë t·ª´ 3-8"
        />
        <small
          style={{
            color: "#666",
            fontSize: "0.8rem",
            marginTop: "4px",
            display: "block",
          }}
        >
          * Nh·∫≠p s·ªë ng√†y h√†nh kinh (3-8 ng√†y)
        </small>
      </div>

      <div className={cx("form-group")}>
        <button
          className={cx("confirm-btn")}
          onClick={handleConfirmSave}
          disabled={isSaving}
        >
          {isSaving ? "‚è≥ ƒêang l∆∞u..." : "üíæ X√°c nh·∫≠n l∆∞u th√¥ng tin chu k√¨"}
        </button>
      </div>

      <div className={cx("form-group")}>
        <span>Th·ªùi gian u·ªëng thu·ªëc tr√°nh thai:</span>
        <div className={cx("time-input-container")}>
          <input
            type="time"
            name="birthControlTime"
            value={cycleData?.birthControlTime || ""}
            onChange={handleInputChange}
            min="06:00"
            max="23:00"
            className={cx("time-input")}
          />

          <button
            type="button"
            className={cx("current-time-btn")}
            onClick={() => setQuickTime(getCurrentTime())}
            title="ƒê·∫∑t th·ªùi gian hi·ªán t·∫°i"
          >
            üïê B√¢y gi·ªù
          </button>
        </div>

        <div className={cx("quick-time-buttons")}>
          <span className={cx("quick-time-label")}>Th·ªùi gian ph·ªï bi·∫øn:</span>
          <div className={cx("time-buttons-grid")}>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("07:00")}
            >
              7:00 AM
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("08:00")}
            >
              8:00 AM
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("12:00")}
            >
              12:00 CH
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("18:00")}
            >
              6:00 CH
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("20:00")}
            >
              8:00 CH
            </button>
            <button
              type="button"
              className={cx("quick-time-btn")}
              onClick={() => setQuickTime("22:00")}
            >
              10:00 CH
            </button>
          </div>
        </div>

        <div className="mb-4">
          <div className="flex justify-between items-center mb-3">
            <span className="text-sm font-medium text-gray-700">
              Ch·ªçn ng√†y trong tu·∫ßn:
            </span>
            <div className="flex gap-2">
              <button
                type="button"
                className="px-3 py-1 bg-green-100 text-green-700 rounded-md hover:bg-green-200 transition-colors text-sm"
                onClick={selectAllDays}
                title="Ch·ªçn t·∫•t c·∫£ ng√†y"
              >
                C·∫£ tu·∫ßn
              </button>
              <button
                type="button"
                className="px-3 py-1 bg-red-100 text-red-700 rounded-md hover:bg-red-200 transition-colors text-sm"
                onClick={clearAllDays}
                title="B·ªè ch·ªçn t·∫•t c·∫£"
              >
                X√≥a h·∫øt
              </button>
            </div>
          </div>

          <div className="grid grid-cols-7 gap-2">
            {daysOfWeek.map((day) => (
              <label
                key={day.value}
                className={`flex flex-col items-center p-3 border rounded-md cursor-pointer transition-colors ${
                  selectedDays.includes(day.value)
                    ? "bg-pink-100 border-pink-500 text-pink-700"
                    : "bg-gray-50 border-gray-300 text-gray-700 hover:bg-gray-100"
                }`}
              >
                <input
                  type="checkbox"
                  checked={selectedDays.includes(day.value)}
                  onChange={() => handleDaySelection(day.value)}
                  className="sr-only"
                />
                <span className="font-bold text-lg">{day.short}</span>
                <span className="text-xs mt-1">{day.label}</span>
              </label>
            ))}
          </div>

          {selectedDays.length > 0 && (
            <div className="mt-3 p-2 bg-green-100 text-green-700 rounded-md text-sm">
              <span>‚úÖ ƒê√£ ch·ªçn: {selectedDays.length} ng√†y</span>
            </div>
          )}
        </div>

        <div className={cx("reminder-section")}>
          <button
            type="button"
            className={cx("reminder-btn", { active: isTimerActive })}
            onClick={setReminder}
            title={isTimerActive ? "H·ªßy h·∫πn gi·ªù" : "ƒê·∫∑t h·∫πn gi·ªù"}
            disabled={!cycleData?.birthControlTime || selectedDays.length === 0}
          >
            {isTimerActive ? "üîï H·ªßy h·∫πn gi·ªù" : "‚è∞ ƒê·∫∑t h·∫πn gi·ªù"}
          </button>

          {isTimerActive && (
            <div className={cx("reminder-status")}>
              <span className={cx("status-text")}>
                üîî ƒêang ho·∫°t ƒë·ªông cho {selectedDays.length} ng√†y/tu·∫ßn
              </span>
            </div>
          )}
        </div>

        <small
          style={{
            color: "#7f8c8d",
            fontSize: "0.85rem",
            marginTop: "5px",
            display: "block",
          }}
        >
          Th·ªùi gian n√™n ƒë·∫∑t h·∫πn t·ª´ 6:00 s√°ng ƒë·∫øn 11:00 t·ªëi
        </small>
      </div>
    </div>
  );
}

export default CycleInputForm;
