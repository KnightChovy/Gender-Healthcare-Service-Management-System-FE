import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import axiosClient from "../../services/axiosClient";
import ScrollToTop from "../../components/ui/ScrollToTop";

const ServicePage = () => {
  const navigate = useNavigate();
  const [services, setServices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState("all");
  const [searchTerm, setSearchTerm] = useState("");

  // Danh s√°ch d·ªãch v·ª• t∆∞ v·∫•n (l·∫•y t·ª´ ConsultationSection.jsx)
  const consultationTypes = [
    {
      id: "c1",
      value: "Kh√°m ph·ª• khoa",
      label: "Kh√°m ph·ª• khoa",
      icon: "ü©∫",
      description:
        "Kh√°m t·ªïng qu√°t c√°c v·∫•n ƒë·ªÅ ph·ª• khoa, ph√°t hi·ªán s·ªõm c√°c b·ªánh l√Ω li√™n quan ƒë·∫øn h·ªá sinh s·∫£n n·ªØ.",
      price: 250000,
      preparationGuidelines:
        "Kh√¥ng n√™n quan h·ªá t√¨nh d·ª•c, kh√¥ng th·ª•t r·ª≠a √¢m ƒë·∫°o trong 24 gi·ªù tr∆∞·ªõc khi kh√°m.",
    },
    {
      id: "c2",
      value: "T∆∞ v·∫•n chu k·ª≥ kinh nguy·ªát",
      label: "T∆∞ v·∫•n chu k·ª≥ kinh nguy·ªát",
      icon: "üìÖ",
      description:
        "T∆∞ v·∫•n v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn chu k·ª≥ kinh nguy·ªát, r·ªëi lo·∫°n kinh nguy·ªát.",
      price: 250000,
      preparationGuidelines: "Mang theo s·ªï ghi ch√©p chu k·ª≥ kinh nguy·ªát n·∫øu c√≥.",
    },
    {
      id: "c3",
      value: "T∆∞ v·∫•n tr√°nh thai",
      label: "T∆∞ v·∫•n tr√°nh thai",
      icon: "üíä",
      description: "T∆∞ v·∫•n c√°c bi·ªán ph√°p tr√°nh thai ph√π h·ª£p v·ªõi t·ª´ng c√° nh√¢n.",
      price: 250000,
      preparationGuidelines:
        "Chu·∫©n b·ªã th√¥ng tin v·ªÅ c√°c bi·ªán ph√°p tr√°nh thai ƒë√£ s·ª≠ d·ª•ng (n·∫øu c√≥).",
    },
    {
      id: "c4",
      value: "T∆∞ v·∫•n thai k·ª≥",
      label: "T∆∞ v·∫•n thai k·ª≥",
      icon: "ü§±",
      description:
        "T∆∞ v·∫•n theo d√µi thai k·ª≥, ch·∫ø ƒë·ªô dinh d∆∞·ª°ng v√† chƒÉm s√≥c trong th·ªùi gian mang thai.",
      price: 250000,
      preparationGuidelines:
        "Mang theo s·ªï kh√°m thai v√† c√°c k·∫øt qu·∫£ x√©t nghi·ªám g·∫ßn nh·∫•t (n·∫øu c√≥).",
    },
    {
      id: "c5",
      value: "T∆∞ v·∫•n sinh s·∫£n",
      label: "T∆∞ v·∫•n sinh s·∫£n",
      icon: "üë∂",
      description:
        "T∆∞ v·∫•n v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn kh·∫£ nƒÉng sinh s·∫£n, v√¥ sinh, hi·∫øm mu·ªôn.",
      price: 25000,
      preparationGuidelines: "C·∫£ hai v·ª£ ch·ªìng n√™n c√πng tham gia bu·ªïi t∆∞ v·∫•n.",
    },
    {
      id: "c6",
      value: "T∆∞ v·∫•n chung",
      label: "T∆∞ v·∫•n chung",
      icon: "üí¨",
      description: "T∆∞ v·∫•n v·ªÅ c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe sinh s·∫£n n√≥i chung.",
      price: 250000,
      preparationGuidelines: "Chu·∫©n b·ªã s·∫µn c√¢u h·ªèi c·∫ßn t∆∞ v·∫•n.",
    },
  ];

  // Danh s√°ch d·ªãch v·ª• x√©t nghi·ªám
  const testServices = [
    {
      id: "t1",
      value: "X√©t nghi·ªám HIV",
      label: "X√©t nghi·ªám HIV",
      icon: "üß™",
      description: "Ph√°t hi·ªán kh√°ng th·ªÉ HIV trong m√°u ƒë·ªÉ ch·∫©n ƒëo√°n s·ªõm.",
      price: 250000,
      preparationGuidelines: "Kh√¥ng c·∫ßn chu·∫©n b·ªã ƒë·∫∑c bi·ªát.",
      resultWaitTime: 2,
    },
    {
      id: "t2",
      value: "T·ªïng ph√¢n t√≠ch t·∫ø b√†o m√°u",
      label: "T·ªïng ph√¢n t√≠ch t·∫ø b√†o m√°u",
      icon: "ü©∏",
      description:
        "Ki·ªÉm tra c√°c ch·ªâ s·ªë c·ªßa m√°u, ph√°t hi·ªán thi·∫øu m√°u, nhi·ªÖm tr√πng.",
      price: 180000,
      preparationGuidelines: "Nh·ªãn ƒÉn 8 gi·ªù tr∆∞·ªõc khi x√©t nghi·ªám.",
      resultWaitTime: 1,
    },
    {
      id: "t3",
      value: "X√©t nghi·ªám n∆∞·ªõc ti·ªÉu",
      label: "X√©t nghi·ªám n∆∞·ªõc ti·ªÉu",
      icon: "üíß",
      description:
        "Ki·ªÉm tra c√°c ch·ªâ s·ªë trong n∆∞·ªõc ti·ªÉu, ph√°t hi·ªán c√°c b·ªánh l√Ω.",
      price: 150000,
      preparationGuidelines: "Thu th·∫≠p m·∫´u n∆∞·ªõc ti·ªÉu bu·ªïi s√°ng ƒë·∫ßu ti√™n.",
      resultWaitTime: 1,
    },
    {
      id: "t4",
      value: "X√©t nghi·ªám ch·ª©c nƒÉng gan, th·∫≠n",
      label: "X√©t nghi·ªám ch·ª©c nƒÉng gan, th·∫≠n",
      icon: "ü´Å",
      description:
        "Ki·ªÉm tra ho·∫°t ƒë·ªông c·ªßa gan v√† th·∫≠n th√¥ng qua c√°c ch·ªâ s·ªë sinh h√≥a.",
      price: 350000,
      preparationGuidelines: "Nh·ªãn ƒÉn 8 gi·ªù tr∆∞·ªõc khi x√©t nghi·ªám.",
      resultWaitTime: 2,
    },
    {
      id: "t5",
      value: "Si√™u √¢m ph·ª• khoa",
      label: "Si√™u √¢m ph·ª• khoa",
      icon: "üì°",
      description:
        "Ki·ªÉm tra t√¨nh tr·∫°ng c·ªßa t·ª≠ cung, bu·ªìng tr·ª©ng v√† c√°c c∆° quan kh√°c trong v√πng ch·∫≠u.",
      price: 300000,
      preparationGuidelines:
        "U·ªëng ƒë·∫ßy b√†ng quang tr∆∞·ªõc khi si√™u √¢m (u·ªëng 3-4 c·ªëc n∆∞·ªõc 1 gi·ªù tr∆∞·ªõc).",
      resultWaitTime: 0,
    },
    {
      id: "t6",
      value: "T·∫ßm so√°t ung th∆∞ c·ªï t·ª≠ cung (Pap smear)",
      label: "T·∫ßm so√°t ung th∆∞ c·ªï t·ª≠ cung",
      icon: "üî¨",
      description:
        "Ph√°t hi·ªán s·ªõm c√°c t·∫ø b√†o b·∫•t th∆∞·ªùng v√† nguy c∆° ung th∆∞ c·ªï t·ª≠ cung.",
      price: 450000,
      preparationGuidelines:
        "Kh√¥ng quan h·ªá t√¨nh d·ª•c, kh√¥ng ƒë·∫∑t thu·ªëc √¢m ƒë·∫°o trong 48 gi·ªù tr∆∞·ªõc khi x√©t nghi·ªám.",
      resultWaitTime: 7,
    },
  ];

  // Fetch d·ªãch v·ª• t·ª´ API (n·∫øu c√≥)
  useEffect(() => {
    // Set page title
    document.title = "D·ªãch v·ª• y t·∫ø | Healthcare Service";

    // Scroll to top when component mounts
    window.scrollTo(0, 0);

    const fetchServices = async () => {
      try {
        setLoading(true);
        const response = await axiosClient.get("/v1/services");
        if (response.data && response.data.success) {
          // N·∫øu c√≥ API, s·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ API
          setServices(response.data.data);
        } else {
          // N·∫øu kh√¥ng c√≥ API, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u
          setServices([...consultationTypes, ...testServices]);
        }
      } catch (error) {
        console.error("Error fetching services:", error);
        // S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫´u n·∫øu API l·ªói
        setServices([...consultationTypes, ...testServices]);
      } finally {
        setLoading(false);
      }
    };

    fetchServices();
  }, []);

  // L·ªçc d·ªãch v·ª• theo tab
  const filteredServices = services
    .filter((service) => {
      // Filter by tab
      if (activeTab === "all") return true;

      const isConsultation = consultationTypes.some((c) => c.id === service.id);
      if (activeTab === "consultation") return isConsultation;
      if (activeTab === "test") return !isConsultation;
      return true;
    })
    .filter((service) => {
      // Filter by search term
      if (!searchTerm) return true;

      const searchLower = searchTerm.toLowerCase();
      return (
        service.label.toLowerCase().includes(searchLower) ||
        service.description.toLowerCase().includes(searchLower)
      );
    });
  // X·ª≠ l√Ω click ƒë·∫∑t l·ªãch
  const handleBookService = (service, serviceType) => {
    if (serviceType === "consultation") {
      navigate("/appointment", {
        state: { selectedService: service, serviceType: "consultation" },
      });
    } else {
      // ƒê·∫£m b·∫£o th√¥ng tin d·ªãch v·ª• ƒë∆∞·ª£c truy·ªÅn qua route
      const serviceWithInfo = { ...service };
      console.log("Booking test service:", serviceWithInfo);
      navigate("/service", {
        state: { selectedService: serviceWithInfo, serviceType: "test" },
      });
    }
  };

  // X√°c ƒë·ªãnh lo·∫°i d·ªãch v·ª•
  const getServiceType = (serviceId) => {
    return consultationTypes.some((c) => c.id === serviceId)
      ? "consultation"
      : "test";
  };

  // Format gi√° ti·ªÅn
  const formatPrice = (price) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };
  return (
    <div className="font-sans">
      <div className="bg-gradient-to-r from-blue-900 to-blue-700 bg-opacity-80 text-white text-center py-20 px-4 mb-10 rounded-lg">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-4xl font-bold mb-4">
            D·ªãch v·ª• y t·∫ø chuy√™n nghi·ªáp
          </h1>
          <p className="text-xl opacity-90">
            ChƒÉm s√≥c s·ª©c kh·ªèe to√†n di·ªán v·ªõi c√°c d·ªãch v·ª• t∆∞ v·∫•n v√† x√©t nghi·ªám
            ch·∫•t l∆∞·ª£ng cao
          </p>
        </div>
      </div>

      {/* Section hi·ªÉn th·ªã d·ªãch v·ª• t∆∞ v·∫•n */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-16">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-800 mb-3">
            D·ªãch v·ª• t∆∞ v·∫•n
          </h2>
          <p className="text-gray-600">
            ƒê·ªôi ng≈© b√°c sƒ© chuy√™n nghi·ªáp, t·∫≠n t√¢m v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {consultationTypes.map((service) => (
            <div
              key={service.id}
              className="bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden flex flex-col h-full border border-gray-100"
            >
              <div className="bg-green-50 p-4 flex items-center">
                <div className="text-4xl mr-3">{service.icon}</div>
                <h3 className="text-xl font-semibold text-gray-800">
                  {service.label}
                </h3>
              </div>
              <div className="p-6">
                <p className="text-gray-600 mb-4">{service.description}</p>
                <div className="py-3 border-t border-b border-gray-100 mb-4">
                  <p className="mb-1">
                    <span className="font-semibold text-gray-700">Gi√°:</span>{" "}
                    {formatPrice(service.price)}
                  </p>
                </div>
                <div className="bg-gray-50 rounded-md p-4 mb-4">
                  <span className="font-semibold text-gray-700">
                    H∆∞·ªõng d·∫´n chu·∫©n b·ªã:
                  </span>
                  <p className="mt-1 text-gray-600 text-sm">
                    {service.preparationGuidelines}
                  </p>
                </div>
              </div>
              <div className="mt-auto p-4 pt-0">
                <button
                  className="w-full py-3 px-4 rounded-md font-medium bg-green-600 hover:bg-green-700 text-white transition-colors duration-200"
                  onClick={() => handleBookService(service, "consultation")}
                >
                  ƒê·∫∑t l·ªãch t∆∞ v·∫•n
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Section hi·ªÉn th·ªã d·ªãch v·ª• x√©t nghi·ªám */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-16">
        <div className="text-center mb-8">
          <h2 className="text-3xl font-bold text-gray-800 mb-3">
            D·ªãch v·ª• x√©t nghi·ªám
          </h2>
          <p className="text-gray-600">
            X√©t nghi·ªám ch√≠nh x√°c v·ªõi trang thi·∫øt b·ªã hi·ªán ƒë·∫°i v√† ƒë·ªôi ng≈© k·ªπ thu·∫≠t
            vi√™n chuy√™n nghi·ªáp
          </p>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {testServices.map((service) => (
            <div
              key={service.id}
              className="bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden flex flex-col h-full border border-gray-100"
            >
              <div className="bg-blue-50 p-4 flex items-center">
                <div className="text-4xl mr-3">{service.icon}</div>
                <h3 className="text-xl font-semibold text-gray-800">
                  {service.label}
                </h3>
              </div>
              <div className="p-6">
                <p className="text-gray-600 mb-4">{service.description}</p>
                <div className="py-3 border-t border-b border-gray-100 mb-4">
                  <p className="mb-1">
                    <span className="font-semibold text-gray-700">Gi√°:</span>{" "}
                    {formatPrice(service.price)}
                  </p>
                  {service.resultWaitTime > 0 && (
                    <p>
                      <span className="font-semibold text-gray-700">
                        Th·ªùi gian c√≥ k·∫øt qu·∫£:
                      </span>{" "}
                      {service.resultWaitTime}{" "}
                      {service.resultWaitTime > 1 ? "ng√†y" : "ng√†y"}
                    </p>
                  )}
                </div>
                <div className="bg-gray-50 rounded-md p-4 mb-4">
                  <span className="font-semibold text-gray-700">
                    H∆∞·ªõng d·∫´n chu·∫©n b·ªã:
                  </span>
                  <p className="mt-1 text-gray-600 text-sm">
                    {service.preparationGuidelines}
                  </p>
                </div>
              </div>
              <div className="mt-auto p-4 pt-0">
                <button
                  className="w-full py-3 px-4 rounded-md font-medium bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200"
                  onClick={() => handleBookService(service, "test")}
                >
                  ƒê·∫∑t l·ªãch x√©t nghi·ªám
                </button>
              </div>
            </div>
          ))}
        </div>
      </div>

      

      {/* Add Scroll to Top button */}
      <ScrollToTop />
    </div>
  );
};

export default ServicePage;
