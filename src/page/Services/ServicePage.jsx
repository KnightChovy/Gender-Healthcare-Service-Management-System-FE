import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import ScrollToTop from "../../components/ui/ScrollToTop";
import axiosClient from "../../services/axiosClient";
import { API_SERVICES } from "../../constants/Apis";

const ServicePage = () => {
  const navigate = useNavigate();
  const [services, setServices] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Danh s√°ch d·ªãch v·ª• t∆∞ v·∫•n m·∫∑c ƒë·ªãnh (s·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng n·∫øu API kh√¥ng ho·∫°t ƒë·ªông)
  const defaultConsultationTypes = [
    {
      id: "c1",
      value: "Kh√°m ph·ª• khoa",
      label: "Kh√°m ph·ª• khoa",
      icon: "ü©∫",
      description:
        "Kh√°m t·ªïng qu√°t c√°c v·∫•n ƒë·ªÅ ph·ª• khoa, ph√°t hi·ªán s·ªõm c√°c b·ªánh l√Ω li√™n quan ƒë·∫øn h·ªá sinh s·∫£n n·ªØ.",
      price: 250000,
      preparationGuidelines:
        "Kh√¥ng n√™n quan h·ªá t√¨nh d·ª•c, kh√¥ng th·ª•t r·ª≠a √¢m ƒë·∫°o trong 24 gi·ªù tr∆∞·ªõc khi kh√°m.",
      serviceType: "consultation",
    },
    {
      id: "c2",
      value: "T∆∞ v·∫•n chu k·ª≥ kinh nguy·ªát",
      label: "T∆∞ v·∫•n chu k·ª≥ kinh nguy·ªát",
      icon: "üìÖ",
      description:
        "T∆∞ v·∫•n v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn chu k·ª≥ kinh nguy·ªát, r·ªëi lo·∫°n kinh nguy·ªát.",
      price: 250000,
      preparationGuidelines: "Mang theo s·ªï ghi ch√©p chu k·ª≥ kinh nguy·ªát n·∫øu c√≥.",
      serviceType: "consultation",
    },
    {
      id: "c3",
      value: "T∆∞ v·∫•n tr√°nh thai",
      label: "T∆∞ v·∫•n tr√°nh thai",
      icon: "üíä",
      description: "T∆∞ v·∫•n c√°c bi·ªán ph√°p tr√°nh thai ph√π h·ª£p v·ªõi t·ª´ng c√° nh√¢n.",
      price: 250000,
      preparationGuidelines:
        "Chu·∫©n b·ªã th√¥ng tin v·ªÅ c√°c bi·ªán ph√°p tr√°nh thai ƒë√£ s·ª≠ d·ª•ng (n·∫øu c√≥).",
      serviceType: "consultation",
    },
    {
      id: "c4",
      value: "T∆∞ v·∫•n thai k·ª≥",
      label: "T∆∞ v·∫•n thai k·ª≥",
      icon: "ü§±",
      description:
        "T∆∞ v·∫•n theo d√µi thai k·ª≥, ch·∫ø ƒë·ªô dinh d∆∞·ª°ng v√† chƒÉm s√≥c trong th·ªùi gian mang thai.",
      price: 250000,
      preparationGuidelines:
        "Mang theo s·ªï kh√°m thai v√† c√°c k·∫øt qu·∫£ x√©t nghi·ªám g·∫ßn nh·∫•t (n·∫øu c√≥).",
      serviceType: "consultation",
    },
    {
      id: "c5",
      value: "T∆∞ v·∫•n sinh s·∫£n",
      label: "T∆∞ v·∫•n sinh s·∫£n",
      icon: "üë∂",
      description:
        "T∆∞ v·∫•n v·ªÅ c√°c v·∫•n ƒë·ªÅ li√™n quan ƒë·∫øn kh·∫£ nƒÉng sinh s·∫£n, v√¥ sinh, hi·∫øm mu·ªôn.",
      price: 250000,
      preparationGuidelines: "C·∫£ hai v·ª£ ch·ªìng n√™n c√πng tham gia bu·ªïi t∆∞ v·∫•n.",
      serviceType: "consultation",
    },
    {
      id: "c6",
      value: "T∆∞ v·∫•n chung",
      label: "T∆∞ v·∫•n chung",
      icon: "üí¨",
      description: "T∆∞ v·∫•n v·ªÅ c√°c v·∫•n ƒë·ªÅ s·ª©c kh·ªèe sinh s·∫£n n√≥i chung.",
      price: 250000,
      preparationGuidelines: "Chu·∫©n b·ªã s·∫µn c√¢u h·ªèi c·∫ßn t∆∞ v·∫•n.",
      serviceType: "consultation",
    },
  ];

  // Danh s√°ch d·ªãch v·ª• x√©t nghi·ªám m·∫∑c ƒë·ªãnh
  const defaultTestServices = [
    {
      id: "t1",
      value: "X√©t nghi·ªám HIV",
      label: "X√©t nghi·ªám HIV",
      icon: "üß™",
      description: "Ph√°t hi·ªán kh√°ng th·ªÉ HIV trong m√°u ƒë·ªÉ ch·∫©n ƒëo√°n s·ªõm.",
      price: 250000,
      preparationGuidelines: "Kh√¥ng c·∫ßn chu·∫©n b·ªã ƒë·∫∑c bi·ªát.",
      resultWaitTime: 2,
      serviceType: "test",
    },
    {
      id: "t2",
      value: "T·ªïng ph√¢n t√≠ch t·∫ø b√†o m√°u",
      label: "T·ªïng ph√¢n t√≠ch t·∫ø b√†o m√°u",
      icon: "ü©∏",
      description:
        "Ki·ªÉm tra c√°c ch·ªâ s·ªë c·ªßa m√°u, ph√°t hi·ªán thi·∫øu m√°u, nhi·ªÖm tr√πng.",
      price: 180000,
      preparationGuidelines: "Nh·ªãn ƒÉn 8 gi·ªù tr∆∞·ªõc khi x√©t nghi·ªám.",
      resultWaitTime: 1,
      serviceType: "test",
    },
    {
      id: "t3",
      value: "X√©t nghi·ªám n∆∞·ªõc ti·ªÉu",
      label: "X√©t nghi·ªám n∆∞·ªõc ti·ªÉu",
      icon: "üíß",
      description:
        "Ki·ªÉm tra c√°c ch·ªâ s·ªë trong n∆∞·ªõc ti·ªÉu, ph√°t hi·ªán c√°c b·ªánh l√Ω.",
      price: 150000,
      preparationGuidelines: "Thu th·∫≠p m·∫´u n∆∞·ªõc ti·ªÉu bu·ªïi s√°ng ƒë·∫ßu ti√™n.",
      resultWaitTime: 1,
      serviceType: "test",
    },
    {
      id: "t4",
      value: "X√©t nghi·ªám ch·ª©c nƒÉng gan, th·∫≠n",
      label: "X√©t nghi·ªám ch·ª©c nƒÉng gan, th·∫≠n",
      icon: "ü´Å",
      description:
        "Ki·ªÉm tra ho·∫°t ƒë·ªông c·ªßa gan v√† th·∫≠n th√¥ng qua c√°c ch·ªâ s·ªë sinh h√≥a.",
      price: 350000,
      preparationGuidelines: "Nh·ªãn ƒÉn 8 gi·ªù tr∆∞·ªõc khi x√©t nghi·ªám.",
      resultWaitTime: 2,
      serviceType: "test",
    },
    {
      id: "t5",
      value: "Si√™u √¢m ph·ª• khoa",
      label: "Si√™u √¢m ph·ª• khoa",
      icon: "üì°",
      description:
        "Ki·ªÉm tra t√¨nh tr·∫°ng c·ªßa t·ª≠ cung, bu·ªìng tr·ª©ng v√† c√°c c∆° quan kh√°c trong v√πng ch·∫≠u.",
      price: 300000,
      preparationGuidelines:
        "U·ªëng ƒë·∫ßy b√†ng quang tr∆∞·ªõc khi si√™u √¢m (u·ªëng 3-4 c·ªëc n∆∞·ªõc 1 gi·ªù tr∆∞·ªõc).",
      resultWaitTime: 0,
      serviceType: "test",
    },
    {
      id: "t6",
      value: "T·∫ßm so√°t ung th∆∞ c·ªï t·ª≠ cung (Pap smear)",
      label: "T·∫ßm so√°t ung th∆∞ c·ªï t·ª≠ cung",
      icon: "üî¨",
      description:
        "Ph√°t hi·ªán s·ªõm c√°c t·∫ø b√†o b·∫•t th∆∞·ªùng v√† nguy c∆° ung th∆∞ c·ªï t·ª≠ cung.",
      price: 450000,
      preparationGuidelines:
        "Kh√¥ng quan h·ªá t√¨nh d·ª•c, kh√¥ng ƒë·∫∑t thu·ªëc √¢m ƒë·∫°o trong 48 gi·ªù tr∆∞·ªõc khi x√©t nghi·ªám.",
      resultWaitTime: 7,
      serviceType: "test",
    },
  ];

  // Map icons d·ª±a v√†o lo·∫°i d·ªãch v·ª•
  const getServiceIcon = (serviceType, name) => {
    // Default icons based on service type
    const defaultIcons = {
      consultation: "üí¨",
      test: "üß™",
    };

    // Specific icons based on keywords in the service name
    const iconMap = {
      "ph·ª• khoa": "ü©∫",
      "kinh nguy·ªát": "üìÖ",
      "tr√°nh thai": "üíä",
      "thai k·ª≥": "ü§±",
      "sinh s·∫£n": "üë∂",
      hiv: "üß™",
      m√°u: "ü©∏",
      "n∆∞·ªõc ti·ªÉu": "üíß",
      gan: "ü´Å",
      th·∫≠n: "ü´Å",
      "si√™u √¢m": "üì°",
      "ung th∆∞": "üî¨",
    };

    // Check if service name contains any of the keywords
    for (const [keyword, icon] of Object.entries(iconMap)) {
      if (name.toLowerCase().includes(keyword.toLowerCase())) {
        return icon;
      }
    }

    // Return default icon based on service type
    return defaultIcons[serviceType] || "‚öïÔ∏è";
  };

  // L·∫•y d·ªØ li·ªáu d·ªãch v·ª• t·ª´ API
  useEffect(() => {
    const fetchServices = async () => {
      try {
        setLoading(true);
        const response = await axiosClient.get(API_SERVICES);

        if (response.data && Array.isArray(response.data)) {
          // Map API data to our format
          const mappedServices = response.data.map((service) => ({
            id: service.service_id || service.id,
            value: service.name,
            label: service.name,
            icon: getServiceIcon(service.serviceType, service.name),
            description: service.description || "Kh√¥ng c√≥ m√¥ t·∫£",
            price: service.price || 0,
            preparationGuidelines:
              service.preparationGuidelines || "Kh√¥ng c√≥ h∆∞·ªõng d·∫´n c·ª• th·ªÉ",
            resultWaitTime: service.resultWaitTime || 0,
            serviceType: service.serviceType || "consultation",
          }));

          setServices(mappedServices);
        } else {
          // S·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh n·∫øu API kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng
          setServices([...defaultConsultationTypes, ...defaultTestServices]);
          console.log(
            "API kh√¥ng tr·∫£ v·ªÅ ƒë√∫ng ƒë·ªãnh d·∫°ng d·ªØ li·ªáu, s·ª≠ d·ª•ng d·ªØ li·ªáu m·∫∑c ƒë·ªãnh"
          );
        }
      } catch (err) {
        console.error("L·ªói khi l·∫•y d·ªØ li·ªáu d·ªãch v·ª•:", err);
        setError(
          "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu d·ªãch v·ª•. ƒêang hi·ªÉn th·ªã d·ªØ li·ªáu m·∫∑c ƒë·ªãnh."
        );
        setServices([...defaultConsultationTypes, ...defaultTestServices]);
      } finally {
        setLoading(false);
      }
    };

    fetchServices();
  }, []);

  // Ph√¢n lo·∫°i d·ªãch v·ª•
  const consultationServices = services.filter(
    (service) => service.serviceType === "consultation"
  );

  const testServices = services.filter(
    (service) => service.serviceType === "test"
  );

  // C√°c h√†m x·ª≠ l√Ω ƒë·∫∑t l·ªãch
  const handleBookConsultation = (service) => {
    navigate("/appointment", {
      state: { selectedService: service, serviceType: "consultation" },
    });
  };

  const handleBookTest = (service) => {
    navigate("/service", {
      state: { selectedService: service, serviceType: "test" },
    });
  };
  // Set ti√™u ƒë·ªÅ trang v√† cu·ªôn l√™n ƒë·∫ßu trang
  useEffect(() => {
    document.title = "D·ªãch v·ª• y t·∫ø | Healthcare Service";
    window.scrollTo(0, 0);
  }, []);

  // Format gi√° ti·ªÅn
  const formatPrice = (price) => {
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(price);
  };

  return (
    <div className="font-sans">
      <div className="bg-gradient-to-r from-blue-900 to-blue-700 bg-opacity-80 text-white text-center py-20 px-4 mb-10 rounded-lg">
        <div className="max-w-3xl mx-auto">
          <h1 className="text-4xl font-bold mb-4">
            D·ªãch v·ª• y t·∫ø chuy√™n nghi·ªáp
          </h1>
          <p className="text-xl opacity-90">
            ChƒÉm s√≥c s·ª©c kh·ªèe to√†n di·ªán v·ªõi c√°c d·ªãch v·ª• t∆∞ v·∫•n v√† x√©t nghi·ªám
            ch·∫•t l∆∞·ª£ng cao
          </p>
        </div>
      </div>
      {/* Loading state */}
      {loading && (
        <div className="max-w-7xl mx-auto px-4 text-center py-16">
          <div className="flex justify-center items-center">
            <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
          </div>
          <p className="mt-4 text-gray-600">ƒêang t·∫£i d·ªØ li·ªáu d·ªãch v·ª•...</p>
        </div>
      )}
      {/* Error message */}
      {error && (
        <div className="max-w-7xl mx-auto px-4 text-center py-4">
          <p className="text-yellow-600 bg-yellow-50 p-3 rounded-md">{error}</p>
        </div>
      )}
      {/* Section hi·ªÉn th·ªã d·ªãch v·ª• t∆∞ v·∫•n */}
      {!loading && consultationServices.length > 0 && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-16">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-800 mb-3">
              D·ªãch v·ª• t∆∞ v·∫•n
            </h2>
            <p className="text-gray-600">
              ƒê·ªôi ng≈© b√°c sƒ© chuy√™n nghi·ªáp, t·∫≠n t√¢m v·ªõi nhi·ªÅu nƒÉm kinh nghi·ªám
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {consultationServices.map((service) => (
              <div
                key={service.id}
                className="bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden flex flex-col h-full border border-gray-100"
              >
                <div className="bg-green-50 p-4 flex items-center">
                  <div className="text-4xl mr-3">{service.icon}</div>
                  <h3 className="text-xl font-semibold text-gray-800">
                    {service.label}
                  </h3>
                </div>
                <div className="p-6">
                  <p className="text-gray-600 mb-4">{service.description}</p>
                  <div className="py-3 border-t border-b border-gray-100 mb-4">
                    <p className="mb-1">
                      <span className="font-semibold text-gray-700">Gi√°:</span>{" "}
                      {formatPrice(service.price)}
                    </p>
                  </div>
                  <div className="bg-gray-50 rounded-md p-4 mb-4">
                    <span className="font-semibold text-gray-700">
                      H∆∞·ªõng d·∫´n chu·∫©n b·ªã:
                    </span>
                    <p className="mt-1 text-gray-600 text-sm">
                      {service.preparationGuidelines}
                    </p>
                  </div>
                </div>
                <div className="mt-auto p-4 pt-0">
                  <button
                    className="w-full py-3 px-4 rounded-md font-medium bg-green-600 hover:bg-green-700 text-white transition-colors duration-200"
                    onClick={() => handleBookConsultation(service)}
                  >
                    ƒê·∫∑t l·ªãch t∆∞ v·∫•n
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
      {/* Section hi·ªÉn th·ªã d·ªãch v·ª• x√©t nghi·ªám */}
      {!loading && testServices.length > 0 && (
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-16">
          <div className="text-center mb-8">
            <h2 className="text-3xl font-bold text-gray-800 mb-3">
              D·ªãch v·ª• x√©t nghi·ªám
            </h2>
            <p className="text-gray-600">
              X√©t nghi·ªám ch√≠nh x√°c v·ªõi trang thi·∫øt b·ªã hi·ªán ƒë·∫°i v√† ƒë·ªôi ng≈© k·ªπ
              thu·∫≠t vi√™n chuy√™n nghi·ªáp
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
            {testServices.map((service) => (
              <div
                key={service.id}
                className="bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 overflow-hidden flex flex-col h-full border border-gray-100"
              >
                <div className="bg-blue-50 p-4 flex items-center">
                  <div className="text-4xl mr-3">{service.icon}</div>
                  <h3 className="text-xl font-semibold text-gray-800">
                    {service.label}
                  </h3>
                </div>
                <div className="p-6">
                  <p className="text-gray-600 mb-4">{service.description}</p>
                  <div className="py-3 border-t border-b border-gray-100 mb-4">
                    <p className="mb-1">
                      <span className="font-semibold text-gray-700">Gi√°:</span>{" "}
                      {formatPrice(service.price)}
                    </p>
                    {service.resultWaitTime > 0 && (
                      <p>
                        <span className="font-semibold text-gray-700">
                          Th·ªùi gian c√≥ k·∫øt qu·∫£:
                        </span>{" "}
                        {service.resultWaitTime}{" "}
                        {service.resultWaitTime > 1 ? "ng√†y" : "ng√†y"}
                      </p>
                    )}
                  </div>
                  <div className="bg-gray-50 rounded-md p-4 mb-4">
                    <span className="font-semibold text-gray-700">
                      H∆∞·ªõng d·∫´n chu·∫©n b·ªã:
                    </span>
                    <p className="mt-1 text-gray-600 text-sm">
                      {service.preparationGuidelines}
                    </p>
                  </div>
                </div>
                <div className="mt-auto p-4 pt-0">
                  {" "}
                  <button
                    className="w-full py-3 px-4 rounded-md font-medium bg-blue-600 hover:bg-blue-700 text-white transition-colors duration-200"
                    onClick={() => handleBookTest(service)}
                  >
                    ƒê·∫∑t l·ªãch x√©t nghi·ªám
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}{" "}
      {/* Hi·ªÉn th·ªã th√¥ng b√°o khi kh√¥ng c√≥ d·ªãch v·ª• */}
      {!loading &&
        consultationServices.length === 0 &&
        testServices.length === 0 && (
          <div className="max-w-7xl mx-auto px-4 text-center py-16">
            <p className="text-gray-600">
              Kh√¥ng t√¨m th·∫•y d·ªãch v·ª• n√†o. Vui l√≤ng th·ª≠ l·∫°i sau.
            </p>
          </div>
        )}
      {/* K·∫øt th√∫c ph·∫ßn c√°c d·ªãch v·ª• */}
      {/* Th√¥ng tin th√™m v·ªÅ d·ªãch v·ª• */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-16">
        <div className="bg-blue-50 rounded-xl p-8">
          <div className="text-center mb-8">
            <h2 className="text-2xl font-bold text-gray-800 mb-4">
              T·∫°i sao ch·ªçn d·ªãch v·ª• c·ªßa ch√∫ng t√¥i?
            </h2>
            <p className="text-gray-600 max-w-3xl mx-auto">
              Trung t√¢m Y t·∫ø c·ªßa ch√∫ng t√¥i cung c·∫•p d·ªãch v·ª• chƒÉm s√≥c s·ª©c kh·ªèe
              to√†n di·ªán v·ªõi ƒë·ªôi ng≈© b√°c sƒ© gi√†u kinh nghi·ªám v√† trang thi·∫øt b·ªã
              hi·ªán ƒë·∫°i
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="text-center p-4">
              <div className="text-4xl mb-4 text-blue-600 flex justify-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-16 w-16"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"
                  />
                </svg>
              </div>
              <h3 className="text-xl font-medium mb-2">Ch·∫•t l∆∞·ª£ng cao</h3>
              <p className="text-gray-600">
                C√°c d·ªãch v·ª• y t·∫ø ƒë∆∞·ª£c th·ª±c hi·ªán b·ªüi ƒë·ªôi ng≈© b√°c sƒ© chuy√™n khoa
                h√†ng ƒë·∫ßu v√† trang thi·∫øt b·ªã hi·ªán ƒë·∫°i
              </p>
            </div>

            <div className="text-center p-4">
              <div className="text-4xl mb-4 text-green-600 flex justify-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-16 w-16"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"
                  />
                </svg>
              </div>
              <h3 className="text-xl font-medium mb-2">Ti·∫øt ki·ªám th·ªùi gian</h3>
              <p className="text-gray-600">
                Quy tr√¨nh ƒë·∫∑t l·ªãch nhanh ch√≥ng, thu·∫≠n ti·ªán v√† k·∫øt qu·∫£ x√©t nghi·ªám
                ƒë∆∞·ª£c tr·∫£ trong th·ªùi gian s·ªõm nh·∫•t
              </p>
            </div>

            <div className="text-center p-4">
              <div className="text-4xl mb-4 text-purple-600 flex justify-center">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  className="h-16 w-16"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z"
                  />
                </svg>
              </div>
              <h3 className="text-xl font-medium mb-2">T∆∞ v·∫•n chuy√™n s√¢u</h3>
              <p className="text-gray-600">
                Nh·∫≠n t∆∞ v·∫•n c√° nh√¢n h√≥a t·ª´ c√°c chuy√™n gia s·ª©c kh·ªèe gi√∫p b·∫°n hi·ªÉu
                r√µ h∆°n v·ªÅ t√¨nh tr·∫°ng s·ª©c kh·ªèe
              </p>
            </div>
          </div>
        </div>
      </div>
      {/* Ph·∫ßn li√™n h·ªá v√† ƒë·∫∑t l·ªãch */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 mb-16 bg-gradient-to-r from-blue-700 to-blue-900 rounded-xl text-white py-8">
        <div className="text-center mb-6">
          <h2 className="text-2xl font-bold mb-4">
            B·∫°n mu·ªën ƒë·∫∑t l·ªãch t∆∞ v·∫•n ho·∫∑c x√©t nghi·ªám?
          </h2>
          <p className="opacity-90 max-w-2xl mx-auto">
            Li√™n h·ªá ngay v·ªõi ch√∫ng t√¥i ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n v√† ƒë·∫∑t l·ªãch ph√π h·ª£p v·ªõi
            nhu c·∫ßu c·ªßa b·∫°n
          </p>
        </div>{" "}
        <div className="flex flex-col sm:flex-row justify-center gap-4">
          <button
            onClick={() => navigate("/appointment")}
            className="bg-white text-blue-700 hover:bg-blue-50 font-medium px-6 py-3 rounded-md transition-colors duration-200"
          >
            ƒê·∫∑t l·ªãch ngay
          </button>
          <button
            onClick={() => (window.location.href = "tel:1900000123")}
            className="bg-transparent hover:bg-blue-800 border border-white font-medium px-6 py-3 rounded-md transition-colors duration-200"
          >
            G·ªçi ƒëi·ªán t∆∞ v·∫•n
          </button>
        </div>
      </div>
      {/* Add Scroll to Top button */}
      <ScrollToTop />

    </div>
  );
};

export default ServicePage;
